{"version":3,"sources":["Api.js","fieldSchema.js","FieldBlock.js","App.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","hugeFormRef","ref","InputField","props","field","form","item","id","isInvalid","errors","name","touched","inputParams","useCallback","className","type","options","map","option","idx","key","connect","fixed","useState","Fragment","htmlFor","split","reverse","join","component","process","items","validSchemas","initValues","fieldBlockSchema","yup","Yup","value","oneOf","fieldSchema","length","fieldId","App","initialValues","setInitialValues","useEffect","a","async","once","result","val","onSubmit","values","actions","set","console","error","setSubmitting","validationSchema","shape","enableReinitialize","dirty","isSubmitting","handleSubmit","handleReset","Object","keys","disabled","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0a225096.chunk.js","sourcesContent":["// Firebase App (the core Firebase SDK) is always required and\r\n// must be listed before other Firebase SDKs\r\nimport * as firebase from \"firebase/app\"\r\n\r\n// Add the Firebase services that you want to use\r\nimport \"firebase/database\"\r\n\r\nconst firebaseConfig = {\r\n    apiKey: 'public',\r\n    authDomain: \"localhost\",\r\n    databaseURL: \"https://kokoroko-firebase.firebaseio.com/\",\r\n    projectId: \"kokoroko-firebase\",\r\n}\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig)\r\n\r\nexport const hugeFormRef = firebase.database().ref('hugeform/dev')\r\n","import * as Yup from 'yup'\r\n\r\nexport const items = {}\r\nexport const validSchemas = {}\r\nexport const initValues = {}\r\n\r\nconst fieldBlockSchema = [\r\n    {\r\n        type: 'text',\r\n        yup: Yup.string(),\r\n        value: '',\r\n        fixed: false,\r\n    },\r\n    {\r\n        type: 'number',\r\n        yup: Yup.number(),\r\n        value: 0,\r\n        fixed: false,\r\n    },\r\n    {\r\n        type: 'textarea',\r\n        yup: Yup.string(),\r\n        value: '',\r\n        fixed: false,\r\n    },\r\n    {\r\n        type: 'select',\r\n        options: ['', 'first', 'second', 'third'],\r\n        yup: Yup.string().oneOf(['first', 'second', 'third']),\r\n        value: '',\r\n        fixed: true,\r\n    },\r\n]\r\n\r\nfor (let idx = 1; idx <= 500; idx++) {\r\n    const fieldSchema = fieldBlockSchema[idx % fieldBlockSchema.length]\r\n    const fieldId = fieldSchema.type + '-' + idx\r\n    items[fieldId] = {\r\n        ...fieldSchema,\r\n        id: fieldSchema.fixed ? fieldSchema.type : fieldId\r\n    }\r\n    validSchemas[items[fieldId].id] = fieldSchema.yup\r\n    initValues[items[fieldId].id] = fieldSchema.value\r\n}\r\n","import React, { useState, useCallback } from 'react'\r\nimport { FastField, ErrorMessage, connect } from 'formik'\r\n\r\nconst InputField = (props) => {\r\n    const { field, form, item } = props\r\n    const { id } = item\r\n    const isInvalid = form.errors[field.name] && form.touched[field.name]\r\n\r\n    const inputParams = useCallback(() => {\r\n        return {\r\n            className: 'text-input' + isInvalid && \"error\"\r\n        }\r\n    }, [isInvalid])\r\n\r\n    switch (props.item.type) {\r\n        case 'number':\r\n            return <input type=\"number\" {...field} {...inputParams} />\r\n        case 'text':\r\n            return <input type=\"text\" {...field} {...inputParams} />\r\n        case 'textarea':\r\n            return <textarea {...field} {...inputParams} />\r\n        case 'select':\r\n            return <select {...field} {...inputParams}>\r\n                {item.options.map((option, idx) => <option key={id + '-option-' + idx}>{option}</option>)}\r\n            </select>\r\n        default:\r\n            return <></>\r\n    }\r\n}\r\n\r\nconst FieldBlock = (props) => {\r\n    const { item } = props\r\n    const id = item.fixed ? item.type : item.id\r\n    const [rendered, setRendered] = useState(0)\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <label htmlFor={id}>{id.split('-').reverse().join(' ')}</label>\r\n            <FastField name={id}>\r\n                {({ field, form }) => {\r\n                    return (\r\n                        <>\r\n                            <InputField item={item} field={field} form={form} />\r\n                            <ErrorMessage name={id} component=\"div\" className=\"input-feedback\" />\r\n                            {process.env.NODE_ENV === 'development' && <div style={{ color: '#bbb' }}>Re-Rendered: {setRendered(rendered + 1)}{rendered}</div>}\r\n                        </>\r\n                    )\r\n                }}\r\n            </FastField>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default connect(FieldBlock)\r\n","import { Formik } from 'formik'\nimport React, { useEffect, useState } from 'react'\nimport * as Yup from 'yup'\nimport { hugeFormRef } from './Api'\nimport FieldBlock from './FieldBlock'\nimport { initValues, items, validSchemas } from './fieldSchema'\n\nconst App = () => {\n    const [initialValues, setInitialValues] = useState(initValues)\n    useEffect(() => {\n        (async () => {\n            const result = await hugeFormRef.once('value')\n            setInitialValues(result.val())\n        })()\n    }, [])\n\n    return (\n        <div className=\"app\">\n            <Formik\n                initialValues={initialValues}\n                onSubmit={async (values, actions) => {\n                    try {\n                        await hugeFormRef.set(values)\n                        setInitialValues(values)\n                    } catch (err) {\n                        console.error(err)\n                    }\n                    actions.setSubmitting(false)\n                }}\n                validationSchema={Yup.object().shape(validSchemas)}\n                enableReinitialize={true}\n            >\n                {({ dirty, isSubmitting, handleSubmit, handleReset }) => (\n                    <form onSubmit={handleSubmit}>\n                        {Object.keys(items).map((key, idx) => <FieldBlock key={'group-' + idx} item={items[key]} />)}\n                        <footer>\n                            <button\n                                type=\"button\" className=\"outline\"\n                                disabled={!dirty || isSubmitting}\n                                onClick={handleReset}\n                            >\n                                Reset\n                            </button>\n                            <button type=\"submit\" disabled={isSubmitting}>\n                                Submit\n                            </button>\n                        </footer>\n                    </form>\n                )}\n            </Formik>\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}